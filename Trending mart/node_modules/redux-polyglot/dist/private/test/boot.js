'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var toBe = function toBe(type) {
    return function (received) {
        // eslint-disable-next-line valid-typeof
        var isFunction = (typeof received === 'undefined' ? 'undefined' : _typeof(received)) === type;
        return {
            pass: isFunction,
            message: 'expected ' + received + (isFunction ? 'not' : '') + ' to be a function'
        };
    };
};

expect.extend({
    toBeFunction: toBe('function'),
    toBeString: toBe('string')
});